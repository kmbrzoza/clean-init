// <auto-generated />
using System;
using Insig.Infrastructure.DataModel.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Insig.Infrastructure.Migrations
{
    [DbContext(typeof(InsigContext))]
    partial class InsigContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Insig.Domain.Accesses.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Insig.Domain.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Insig.Domain.Notifications.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("NotificationStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("Insig.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Sub")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Sub")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Insig.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Insig.Domain.Notifications.NotificationStatus", null)
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Insig.Domain.Notifications.NotificationAction", "Action", b1 =>
                        {
                            b1.Property<long>("NotificationId")
                                .HasColumnType("bigint");

                            b1.Property<string>("RedirectUrl")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RedirectUrl");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("Insig.Domain.Notifications.NotificationAuthor", "Author", b1 =>
                        {
                            b1.Property<long>("NotificationId")
                                .HasColumnType("bigint");

                            b1.Property<long?>("AuthorId")
                                .HasColumnType("bigint")
                                .HasColumnName("AuthorId");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("Insig.Domain.Notifications.NotificationMessage", "Message", b1 =>
                        {
                            b1.Property<long>("NotificationId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Body");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Title");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("Insig.Domain.Notifications.NotificationRecipient", "Recipient", b1 =>
                        {
                            b1.Property<long>("NotificationId")
                                .HasColumnType("bigint");

                            b1.Property<long>("RecipientId")
                                .HasColumnType("bigint")
                                .HasColumnName("RecipientId");

                            b1.HasKey("NotificationId");

                            b1.HasIndex("RecipientId");

                            b1.ToTable("Notification");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.HasOne("Insig.Domain.Users.User", null)
                                .WithMany()
                                .HasForeignKey("RecipientId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Action")
                        .IsRequired();

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Message")
                        .IsRequired();

                    b.Navigation("Recipient")
                        .IsRequired();
                });

            modelBuilder.Entity("Insig.Domain.Users.User", b =>
                {
                    b.HasOne("Insig.Domain.Accesses.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
